// –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
const { Pool } = require('pg');
const redis = require('redis');

async function testSetup() {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Beach Lounger...\n');
    
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ PostgreSQL
    console.log('1. –ü—Ä–æ–≤–µ—Ä–∫–∞ PostgreSQL...');
    const pgPool = new Pool({
        host: process.env.DB_HOST || 'localhost',
        port: process.env.DB_PORT || 5432,
        database: process.env.DB_NAME || 'beach_booking',
        user: process.env.DB_USER || 'postgres',
        password: process.env.DB_PASSWORD || 'postgres',
    });
    
    try {
        const client = await pgPool.connect();
        const result = await client.query('SELECT COUNT(*) FROM beaches');
        console.log(`‚úÖ PostgreSQL —Ä–∞–±–æ—Ç–∞–µ—Ç! –ù–∞–π–¥–µ–Ω–æ –ø–ª—è–∂–µ–π: ${result.rows[0].count}`);
        
        if (result.rows[0].count == 0) {
            console.log('‚ö†Ô∏è  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î. –í—ã–ø–æ–ª–Ω–∏—Ç–µ backend/sql/init.sql');
        }
        
        client.release();
    } catch (error) {
        console.log('‚ùå PostgreSQL –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:', error.message);
        console.log('   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ: –∑–∞–ø—É—â–µ–Ω –ª–∏ PostgreSQL, —Å–æ–∑–¥–∞–Ω–∞ –ª–∏ –ë–î beach_booking');
    }
    
    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis
    console.log('\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis...');
    const redisClient = redis.createClient({
        socket: {
            host: process.env.REDIS_HOST || 'localhost',
            port: process.env.REDIS_PORT || 6379,
        }
    });
    
    try {
        await redisClient.connect();
        await redisClient.ping();
        console.log('‚úÖ Redis —Ä–∞–±–æ—Ç–∞–µ—Ç!');
        await redisClient.quit();
    } catch (error) {
        console.log('‚ùå Redis –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:', error.message);
        console.log('   –ó–∞–ø—É—Å—Ç–∏—Ç–µ Redis –∏–ª–∏ Memurai');
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
    console.log('\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤...');
    const net = require('net');
    
    const checkPort = (port, name) => {
        return new Promise((resolve) => {
            const tester = net.createServer()
                .once('error', () => {
                    console.log(`‚úÖ –ü–æ—Ä—Ç ${port} –∑–∞–Ω—è—Ç (${name} –≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç)`);
                    resolve(true);
                })
                .once('listening', () => {
                    tester.close();
                    console.log(`‚ö†Ô∏è  –ü–æ—Ä—Ç ${port} —Å–≤–æ–±–æ–¥–µ–Ω (${name} –Ω–µ –∑–∞–ø—É—â–µ–Ω)`);
                    resolve(false);
                })
                .listen(port);
        });
    };
    
    await checkPort(5432, 'PostgreSQL');
    await checkPort(6379, 'Redis');
    await checkPort(5000, 'Backend');
    
    console.log('\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    console.log('1. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ PostgreSQL –∏ Redis –∑–∞–ø—É—â–µ–Ω—ã');
    console.log('2. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª backend/.env (—Å–º. SETUP.md)');
    console.log('3. –í—ã–ø–æ–ª–Ω–∏—Ç–µ SQL –∏–∑ backend/sql/init.sql');
    console.log('4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ backend: cd backend && node server.js');
    console.log('5. –ó–∞–ø—É—Å—Ç–∏—Ç–µ frontend –Ω–∞ –ø–æ—Ä—Ç—É 8080');
    
    process.exit(0);
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
require('dotenv').config({ path: 'backend/.env' });

testSetup();